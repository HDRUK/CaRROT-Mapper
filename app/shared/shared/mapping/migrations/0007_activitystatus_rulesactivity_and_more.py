# Generated by Django 4.2.15 on 2024-11-22 16:22

from django.db import migrations, models
import django.db.models.deletion


def seeding_objects(apps, schema_editor):
    ActivityStatus = apps.get_model("mapping", "ActivityStatus")
    RulesActivity = apps.get_model("mapping", "RulesActivity")

    rules_activities = [
        {"id": 1, "activity": "QUEUED", "display_name": "Rules activity is queued."},
        {
            "id": 2,
            "activity": "BUILDING_FROM_VOCAB",
            "display_name": "Building mapping rules from vocabulary dictionary.",
        },
        {
            "id": 3,
            "activity": "REUSING_CONCEPTS",
            "display_name": "Reusing Concepts from completed Scan Report.",
        },
        {
            "id": 4,
            "activity": "FINISHED",
            "display_name": "Rules generation activities finished.",
        },
        {
            "id": 5,
            "activity": "FAILED",
            "display_name": "Rules generation activities failed.",
        },
    ]

    for activity in rules_activities:
        RulesActivity.objects.create(
            id=activity["id"],
            activity=activity["activity"],
            display_name=activity["display_name"],
        )

    activity_statuses = [
        {
            "id": 1,
            "status": "IN_PROGRESS",
            "display_name": "The rules activity is in progress.",
        },
        {"id": 2, "status": "FAILED", "display_name": "The rules activity has failed."},
    ]

    for status in activity_statuses:
        ActivityStatus.objects.create(
            id=status["id"],
            status=status["status"],
            display_name=status["display_name"],
        )


def unseeding_objects(apps, schema_editor):
    RulesActivity = apps.get_model("mapping", "RulesActivity")
    ActivityStatus = apps.get_model("mapping", "ActivityStatus")
    # Remove all objects
    RulesActivity.objects.all().delete()
    ActivityStatus.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("mapping", "0006_scanreporttable_death_table"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.CharField(max_length=64)),
                ("display_name", models.CharField(max_length=64)),
                ("details", models.CharField(blank=True, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="RulesActivity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity", models.CharField(max_length=64)),
                ("display_name", models.CharField(max_length=64)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(seeding_objects, unseeding_objects),
        migrations.AddField(
            model_name="scanreporttable",
            name="current_rules_activity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="rules_activity",
                to="mapping.rulesactivity",
            ),
        ),
        migrations.AddField(
            model_name="scanreporttable",
            name="activity_status",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="activity_status",
                to="mapping.activitystatus",
            ),
        ),
    ]
