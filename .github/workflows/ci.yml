name: ci

on: [pull_request]

jobs:
  format_python_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          ref: ${{ github.ref }}
      - name: Blacken Python code
        uses: jpetrucciani/black-check@master
        with:
          path: "."
          black_flags: "--safe --verbose --diff"

  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Add health check to ensure postgres is ready before running tests
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RUNNER_ALLOW_RUNASROOT: true

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Make envfile
        run: |
          touch .env
          echo DB_ENGINE=django.db.backends.postgresql >> .env
          echo DB_HOST=localhost >> .env
          echo DB_NAME=postgres >> .env
          echo DB_PORT=5432 >> .env
          echo DB_PASSWORD=postgres >> .env
          echo DB_USER=postgres >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo DEBUG=True >> .env
          echo "ALLOWED_HOSTS=['localhost']" >> .env

      - name: Build the docker image
        working-directory: ./app
        run: docker build -f api/Dockerfile -t ccom-build:latest .

      - name: Run the docker image
        run: |
          # Create docker network for communication
          docker network create app-network

          # Connect postgres to the network
          docker run --name postgres-db \
            --network app-network \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=postgres \
            -d postgres:latest

          # Run the application container
          docker run -it --env-file .env \
            --network app-network \
            -e DB_HOST=postgres-db \
            -p 8080:8000 -d ccom-build:latest

          # Give it time to start
          sleep 30s

          # Get container ID
          containerid=$(docker ps | grep ccom-build | awk '{print $1;}')
          echo $containerid

          # Check the logs for errors
          if docker logs $containerid | grep -i -q ERROR; then
            docker logs $containerid | grep -i ERROR
            echo "Errors found"
            exit 1
          else
            echo "No errors found!"
          fi

          # Save the logs
          docker logs $containerid >> logs.out

          # Shutdown the containers
          docker stop $containerid
          docker stop postgres-db
          docker network rm app-network

      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: logs.out
          retention-days: 1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies and build Next.js app
        run: |
          npm install
          npm run build
        working-directory: app/next-client-app
